/*
 * User API
 *
 * A simple API to manage users
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using UsersApi.Attributes;
using UsersApi.Models;
using UsersApi.Services.Interfaces;

namespace UsersApi.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        private readonly IUsersService _usersService;

        public UserApiController(IUsersService usersService)
        {
            _usersService = usersService;
        }

        /// <summary>
        /// Create a new user
        /// </summary>
        /// <remarks>Creates a new user</remarks>
        /// <param name="createUserRequestDto">User to create</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="201">User created</response>
        [HttpPost]
        [Route("/user")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 201, type: typeof(UserDto), description: "User created")]
        public virtual async Task<IActionResult> CreateUser([FromBody]CreateUserRequestDto createUserRequestDto, CancellationToken cancellationToken)
        {
            return Ok(await _usersService.CreateAsync(createUserRequestDto, cancellationToken));
        }

        /// <summary>
        /// Delete a user by id
        /// </summary>
        /// <remarks>Deletes a user by id</remarks>
        /// <param name="id">The user id</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="204">User deleted successfully</response>
        [HttpDelete]
        [Route("/user/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUserById")]
        public virtual async Task<IActionResult> DeleteUserById([FromRoute (Name = "id")][Required]Guid id, CancellationToken cancellationToken)
        {
            await _usersService.DeleteAsync(id, cancellationToken);
            return NoContent();
        }

        /// <summary>
        /// Get a user by id
        /// </summary>
        /// <remarks>Returns a user by id</remarks>
        /// <param name="id">The user id</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">A user</response>
        [HttpGet]
        [Route("/user/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDto), description: "A user")]
        public virtual async Task<IActionResult> GetUserById([FromRoute (Name = "id")][Required]Guid id, CancellationToken cancellationToken)
        {
            return Ok(await _usersService.GetByIdAsync(id, cancellationToken));
        }

        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>Returns all users</remarks>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">A list of users</response>
        [HttpGet]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("GetUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UserDto>), description: "A list of users")]
        public virtual async Task<IActionResult> GetUsers(CancellationToken cancellationToken)
        {
            return Ok(await _usersService.GetAllAsync(cancellationToken));
        }

        /// <summary>
        /// Update a user by id
        /// </summary>
        /// <remarks>Updates a user by id</remarks>
        /// <param name="userDto">User to update</param>
        /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
        /// <response code="200">User updated</response>
        [HttpPut]
        [Route("/user")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserDto), description: "User updated")]
        public virtual async Task<IActionResult> UpdateUser([FromBody]UserDto userDto, CancellationToken cancellationToken)
        {
            return Ok(await _usersService.UpdateAsync(userDto, cancellationToken));
        }
    }
}
